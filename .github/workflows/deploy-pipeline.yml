name: Deploy data pipeline

# Action will run on pushes to selected branches
on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read
  deployments: write

jobs:
  deploy:
    runs-on: ubuntu-20.04
    
    env:
      SNOWFLAKE_ACCOUNT: ${{ vars.SNOWFLAKE_ACCOUNT }}
      REPO_NAME: snowflake_devops
      SNOWSQL_PRIVATE_KEY_PASSPHRASE : ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSWORD }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install pipx pyjwt cryptography jinja2-cli oscrypto

      - name: Get variables as JSON
        run: |
          VARS_CONTEXT='${{ toJson(vars) }}'
          echo "$VARS_CONTEXT" > variables.json

      - name: Get Secrets as JSON
        run: |
          SECRETS_JSON=$(jq -n \
          --arg secret1 "${{ secrets.SNOWFLAKE_PUBLIC_KEY }}" \
          --arg secret2 "${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSWORD }}" \
          '{ SNOWFLAKE_PUBLIC_KEY: $secret1, SNOWFLAKE_PRIVATE_KEY_PASSWORD: $secret2 }')
          echo "$SECRETS_JSON" > secrets.json

      - name: Combine Variables, Secrets, and Environment into a Single JSON
        run: |
          # Export environment variables to a JSON file
          env | awk -F= '{print "\"" $1 "\": \"" $2 "\","}' | sed '$ s/,$//' > env.json
          echo "{" > temp_env.json && cat env.json >> temp_env.json && echo "}" >> temp_env.json

          # Combine variables.json, secrets.json, and temp_env.json into a single JSON file
          jq -s '.[0] * .[1] * .[2] | to_entries | sort_by(.key) | from_entries' secrets.json variables.json temp_env.json > combined_vars.json

          # Optionally, sort the keys for readability
          jq -S . combined_vars.json > sorted_vars.json
          mv sorted_vars.json vars.json

      - name: Render SnowCLI and SnowSQL Config with Jinja2
        run: |
          jinja2 .snowflake/config.toml.j2 vars.json > .snowflake/config.toml
          jinja2 .snowsql/config.toml.j2 vars.json > .snowsql/config
          echo "Rendered Snow CLI Config:"
          cat .snowflake/config.toml
          echo "Rendered SnowSQL Config:"
          cat .snowsql/config

      - name: Decode private key
        id: decode-private-key
        run: |
          # Decode the Base64-encoded private key
          echo "${{ secrets.SNOWFLAKE_PRIVATE_KEY_BASE64 }}" | base64 --decode > rsa_key.p8

      - name: Updated Permission for config.toml
        run: |
          chmod 0600 .snowflake/config.toml
          chown $USER .snowflake/config.toml

      - name: Updated Permission for snowsql config
        run: |
          chmod 0600 .snowsql/config
          chown $USER .snowsql/config

      - name: Install Snowflake CLI
        uses: snowflakedb/snowflake-cli-action@v1.5
        with:
          cli-version: "latest"
          default-config-file-path: ".snowflake/config.toml"

      - name: Install SnowSQL
        env:
          SNOWSQL_PRIVATE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSWORD }}
        run: |
          curl -O https://sfc-repo.snowflakecomputing.com/snowsql/bootstrap/1.2/linux_x86_64/snowsql-1.2.9-linux_x86_64.bash
          SNOWSQL_DEST=/usr/local/bin SNOWSQL_LOGIN_SHELL=~/.profile bash snowsql-1.2.9-linux_x86_64.bash
          export PATH="/usr/local/bin:$PATH"
          echo "/usr/local/bin/snowsql" >> "$GITHUB_PATH"
      
      - name: Test SnowSQL
        env:
          SNOWSQL_PRIVATE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSWORD }}
        run: |
          snowsql --version
          snowsql --config .snowsql/config -c workflow -o log_level=DEBUG

      # - name: Generate JWT and Fingerprint
      #   id: generate-jwt
      #   env:
      #     SNOWFLAKE_PRIVATE_KEY_PASSWORD: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSWORD }}
      #     SNOWFLAKE_DEVOPS_USER: ${{ vars.SNOWFLAKE_DEVOPS_USER }}
      #   run: |
      #     python3 ./scripts/generate_jwt.py

      - name: Perform a Snowflake connectivity test
        env:
          # SNOWFLAKE_CONNECTIONS_DEFAULT_JWT: ${{ steps.generate-jwt.outputs.jwt }}
          PRIVATE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSWORD }}
        run: |
          snow connection list
          snow connection test -c workflow --debug

      - name: Fetch repository changes
        env:
          # SNOWFLAKE_CONNECTIONS_DEFAULT_JWT: ${{ steps.generate-jwt.outputs.jwt }}
          PRIVATE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSWORD }}
        run: |
          snow git fetch snowflake_devops -c workflow --debug

      - name: Render All Jinja2 Templates
        run: |
          find steps/ -name "*.sql.j2" | while read -r template; do
            output="${template%.j2}"  # Remove .j2 extension
            jinja2 "$template" vars.json > "$output"
            echo "Rendered: $template â†’ $output"
            cat "$output"
          done

      - name: Cleanup Staged Files
        # env:
        #   SNOWFLAKE_CONNECTIONS_DEFAULT_JWT: ${{ steps.generate-jwt.outputs.jwt }}
        run: |
          echo "Cleaning up staged files..."
          snowsql --config .snowsql/config -c workflow -q "REMOVE @~/staged;"
          echo "Staged files removed."

      - name: Upload Rendered SQL Files to Snowflake Stage
        # env:
        #   SNOWFLAKE_CONNECTIONS_DEFAULT_JWT: ${{ steps.generate-jwt.outputs.jwt }}
        run: |
          for sql_file in steps/*.sql; do
            echo "Uploading file: $sql_file"
            snowsql --config .snowsql/config -c workflow -q "PUT file://$sql_file @~/staged AUTO_COMPRESS=FALSE;"
          done
          snowsql --config .snowsql/config -c workflow -q "LIST @~/staged;"

      - name: Execute Rendered SQL Files in Snowflake
        # env:
        #   SNOWFLAKE_CONNECTIONS_DEFAULT_JWT: ${{ steps.generate-jwt.outputs.jwt }}
        run: |
          for sql_file in steps/*.sql; do
            echo "Executing file: $sql_file"
            snowsql --config .snowsql/config -c workflow -q "EXECUTE IMMEDIATE FROM @~/staged/$(basename $sql_file);"
          done